import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  ScrollView,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import { router } from "expo-router";
import { getUser } from "../../../services/storageService";
import { createPayout } from "../../../services/payoutService";
import { getAllBanks } from "../../../services/bankService";
import { getWalletByUserId } from "../../../services/walletService"; // ‚úÖ Th√™m d√≤ng n√†y
import styles from "./Payout.styles";

export default function PayoutScreen() {
  const [user, setUser] = useState(null);
  const [amount, setAmount] = useState("");
  const [banks, setBanks] = useState([]);
  const [balance, setBalance] = useState(0); // ‚úÖ Th√™m state l∆∞u s·ªë d∆∞ v√≠
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      const u = await getUser();
      setUser(u);

      const bankRes = await getAllBanks();
      if (bankRes.success) setBanks(bankRes.data);

      // ‚úÖ L·∫•y s·ªë d∆∞ v√≠
      const walletRes = await getWalletByUserId();
      if (walletRes.success) {
        setBalance(walletRes.data.balance || 0);
      }
    };
    loadData();
  }, []);

  const selectedBank = user
    ? banks.find((b) => b.bankId === user.bankId)
    : null;

  // ‚úÖ H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn khi nh·∫≠p
  const handleAmountChange = (text) => {
    const numeric = text.replace(/\D/g, ""); // lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    if (!numeric) {
      setAmount("");
      return;
    }
    const formatted = Number(numeric).toLocaleString("vi-VN");
    setAmount(formatted);
  };

  const handlePayout = async () => {
    const rawAmount = Number(amount.replace(/\./g, "")); // b·ªè d·∫•u ch·∫•m ƒë·ªÉ l·∫•y gi√° tr·ªã th·∫≠t

    if (!rawAmount || isNaN(rawAmount) || rawAmount <= 0) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá ƒë·ªÉ r√∫t.");
      return;
    }

    // ‚úÖ Ki·ªÉm tra ƒë·ªß ti·ªÅn
    if (rawAmount > balance) {
      Alert.alert(
        "Kh√¥ng ƒë·ªß s·ªë d∆∞",
        `S·ªë d∆∞ v√≠ c·ªßa b·∫°n hi·ªán l√† ${balance.toLocaleString("vi-VN")}‚Ç´.\nB·∫°n kh√¥ng th·ªÉ r√∫t ${rawAmount.toLocaleString("vi-VN")}‚Ç´.`
      );
      return;
    }

    if (!user?.bankId || !user?.bankNumber) {
      Alert.alert(
        "Thi·∫øu th√¥ng tin ng√¢n h√†ng",
        "Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin ng√¢n h√†ng tr∆∞·ªõc khi r√∫t ti·ªÅn.",
        [
          { text: "H·ªßy", style: "cancel" },
          {
            text: "C·∫≠p nh·∫≠t ngay",
            onPress: () => router.push("/account/edit-profile"),
          },
        ]
      );
      return;
    }

    if (!selectedBank) {
      Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng√¢n h√†ng h·ª£p l·ªá.");
      return;
    }

    // ‚ö†Ô∏è Th√™m b∆∞·ªõc x√°c nh·∫≠n th√¥ng tin tr∆∞·ªõc khi g·ª≠i payout
    Alert.alert(
      "X√°c nh·∫≠n th√¥ng tin ng√¢n h√†ng",
      `Vui l√≤ng ki·ªÉm tra l·∫°i tr∆∞·ªõc khi r√∫t ti·ªÅn:\n\n` +
        `Ng√¢n h√†ng: ${selectedBank.bankName}\n` +
        `S·ªë t√†i kho·∫£n: ${user.bankNumber}\n` +
        `Ch·ªß t√†i kho·∫£n: ${user.fullName}\n` +
        `S·ªë ti·ªÅn: ${rawAmount.toLocaleString("vi-VN")}‚Ç´\n\n` +
        `‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc th√¥ng tin tr√™n l√† ch√≠nh x√°c kh√¥ng?\nCh√∫ng t√¥i s·∫Ω kh√¥ng ch·ªãu tr√°ch nhi·ªám n·∫øu th√¥ng tin sai.`,
      [
        { text: "Ki·ªÉm tra l·∫°i", style: "cancel" },
        {
          text: "X√°c nh·∫≠n r√∫t ti·ªÅn",
          onPress: async () => {
            const payload = {
              referenceId: "payout_" + Math.floor(Date.now() / 1000),
              amount: rawAmount,
              description: `R√∫t ${rawAmount.toLocaleString("vi-VN")}‚Ç´`,
              toBin: selectedBank.binCode,
              toAccountNumber: user.bankNumber,
              category: ["TRANSFER"],
            };

            try {
              setLoading(true);
              console.log("üì§ G·ª≠i y√™u c·∫ßu payout:", payload);

              const res = await createPayout(user.userId, payload);
              console.log("üì• K·∫øt qu·∫£ payout:", res);

              if (res?.error === 0) {
                Alert.alert("‚úÖ Th√†nh c√¥ng", "Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i.", [
                  { text: "OK", onPress: () => router.replace("/account/my-wallet") },
                ]);
              } else {
                Alert.alert("‚ùå L·ªói", res?.message || "Kh√¥ng th·ªÉ r√∫t ti·ªÅn.");
              }
            } catch (err) {
              console.error("‚ùå L·ªói payout:", err);
              Alert.alert("L·ªói", err.message || "Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn.");
            } finally {
              setLoading(false);
            }
          },
        },
      ]
    );
  };

  if (!user) {
    return (
      <SafeAreaView
        style={[
          styles.container,
          { justifyContent: "center", alignItems: "center" },
        ]}
      >
        <ActivityIndicator size="large" color="#3498DB" />
        <Text style={{ marginTop: 10 }}>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</Text>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={{ padding: 20 }}>
        <Text style={styles.title}>R√∫t ti·ªÅn v·ªÅ t√†i kho·∫£n</Text>

        {/* Hi·ªÉn th·ªã s·ªë d∆∞ v√≠ */}
        <View style={{ marginBottom: 10 }}>
          <Text style={{ fontSize: 14, color: "#555" }}>S·ªë d∆∞ v√≠ hi·ªán t·∫°i:</Text>
          <Text style={{ fontSize: 18, fontWeight: "bold", color: "#2ECC71" }}>
            {balance.toLocaleString("vi-VN")}‚Ç´
          </Text>
        </View>

        <Text style={styles.label}>S·ªë ti·ªÅn mu·ªën r√∫t</Text>
        <TextInput
          style={styles.input}
          keyboardType="numeric"
          placeholder="Nh·∫≠p s·ªë ti·ªÅn (VND)"
          value={amount}
          onChangeText={handleAmountChange}
        />

        {/* Th√¥ng tin ng√¢n h√†ng */}
        <View
          style={{
            marginTop: 15,
            padding: 15,
            backgroundColor: "#f7faff",
            borderRadius: 10,
          }}
        >
          <Text style={styles.bankInfoLabel}>
            Ng√¢n h√†ng: {selectedBank?.bankName || "Kh√¥ng r√µ"}
          </Text>
          <Text style={styles.bankInfoLabel}>
            M√£ BIN: {selectedBank?.binCode || "N/A"}
          </Text>
          <Text style={styles.bankInfoLabel}>
            S·ªë t√†i kho·∫£n: {user.bankNumber}
          </Text>
          <Text style={styles.bankInfoLabel}>Ch·ªß t√†i kho·∫£n: {user.fullName}</Text>
        </View>

        <TouchableOpacity
          style={[
            styles.depositButton,
            { backgroundColor: loading ? "#ccc" : "#E74C3C", marginTop: 25 },
          ]}
          onPress={handlePayout}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator color="#fff" />
          ) : (
            <>
              <Ionicons name="cash-outline" size={20} color="#fff" />
              <Text style={styles.depositText}>X√°c nh·∫≠n r√∫t ti·ªÅn</Text>
            </>
          )}
        </TouchableOpacity>

<TouchableOpacity
  style={[styles.backButton, { marginTop: 15 }]}
  onPress={() => router.push("/account/my-wallet")}
>
  <Ionicons name="arrow-back" size={20} color="#fff" />
  <Text style={styles.backText}>Quay l·∫°i</Text>
</TouchableOpacity>

      </ScrollView>
    </SafeAreaView>
  );
}
