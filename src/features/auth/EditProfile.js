import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  ScrollView,
  ActivityIndicator,
  Image,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useRouter } from "expo-router";
import { Ionicons } from "@expo/vector-icons";
import * as ImagePicker from "expo-image-picker";
import { getUser, saveUser } from "../../services/storageService";
import { updateUserInformation, updateUserAvatar } from "../../services/authService";
import DateTimePicker from "@react-native-community/datetimepicker";
import styles from "./EditProfile.styles";
import { getAllBanks } from "../../services/bankService";
import { Picker } from "@react-native-picker/picker"; 


export default function EditProfile() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [user, setUser] = useState(null);

  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [dob, setDob] = useState("");
  const [bio, setBio] = useState("");
  const [avatar, setAvatar] = useState(null);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [banks, setBanks] = useState([]);
const [selectedBankId, setSelectedBankId] = useState("");
const [bankNumber, setBankNumber] = useState("");


  useEffect(() => {
  const loadUserAndBanks = async () => {
    try {
      const u = await getUser();
      console.log("üß© User t·ª´ storage:", u);

      if (u) {
        setUser(u);

        // N·∫øu backend ch·ªâ tr·∫£ v·ªÅ fullName th√¨ t√°ch ra
        const [first, ...lastParts] = (u.fullName || "").split(" ");
        const last = lastParts.join(" ");

        setFirstName(first || "");
        setLastName(last || "");
        setEmail(u.email || u.username || "");
        setDob(u.dateOfBirth || "");
        setBio(u.bio || "");
        setAvatar(u.avatarUrl || "");
        setSelectedBankId(u.bankId || "");      // üëà Th√™m
        setBankNumber(u.bankNumber || "");      // üëà Th√™m
      }

      // üîπ G·ªçi API l·∫•y danh s√°ch ng√¢n h√†ng
      const bankRes = await getAllBanks();
      if (bankRes?.success) {
        setBanks(bankRes.data);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ng√¢n h√†ng:", bankRes?.message);
      }
    } catch (err) {
      console.error("‚ùå L·ªói load user/bank:", err);
    }
  };

  loadUserAndBanks();
}, []);



 const handleSave = async () => {
  if (!firstName || !lastName) {
    Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
    return;
  }

  // üëá Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng thay ƒë·ªïi ho·∫∑c th√™m m·ªõi th√¥ng tin ng√¢n h√†ng
  const oldBankId = user?.bankId || "";
  const oldBankNumber = user?.bankNumber || "";

  const isFirstTimeUpdate = !oldBankId && !oldBankNumber; // l·∫ßn ƒë·∫ßu c·∫≠p nh·∫≠t
  const bankChanged =
    isFirstTimeUpdate ||
    selectedBankId !== oldBankId ||
    bankNumber !== oldBankNumber;

  const saveProfile = async () => {
    setLoading(true);

    const fullName = `${firstName} ${lastName}`.trim();
    const userData = {
      userId: user?.userId,
      firstName,
      lastName,
      email,
      dob,
      bio: bio || "Ch∆∞a c√≥ gi·ªõi thi·ªáu",
      fullName,
      bankId: selectedBankId || null,
      bankNumber: bankNumber || null,
    };

    console.log("üì§ Sending update:", userData);
    const res = await updateUserInformation(userData, user?.token);
    setLoading(false);

    if (res.success) {
      Alert.alert("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng");

      await saveUser({
        ...user,
        firstName,
        lastName,
        fullName,
        dob,
        bio,
        bankId: selectedBankId || user.bankId || null,
        bankNumber: bankNumber || user.bankNumber || null,
      });

      router.push("/(tabs)/account");
    } else {
      console.log("‚ùå Update profile error:", res);
      Alert.alert("Th·∫•t b·∫°i", res.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
  };

  // ‚ö†Ô∏è N·∫øu ng∆∞·ªùi d√πng ƒë·ªïi ho·∫∑c l·∫ßn ƒë·∫ßu nh·∫≠p th√¥ng tin ng√¢n h√†ng
  if (bankChanged) {
    Alert.alert(
      "X√°c nh·∫≠n thay ƒë·ªïi",
      isFirstTimeUpdate
        ? "B·∫°n h√£y ƒë·∫£m b·∫£o r·∫±ng b·∫°n nh·∫≠p ƒë√∫ng s·ªë t√†i kho·∫£n ng√¢n h√†ng. Ch√∫ng t√¥i s·∫Ω kh√¥ng ch·ªãu tr√°ch nhi·ªám cho s·ªë ti·ªÅn b·ªã th·∫•t l·∫°c do sai s·ªë t√†i kho·∫£n ng√¢n h√†ng."
        : "B·∫°n c√≥ ch·∫Øc mu·ªën thay ƒë·ªïi th√¥ng tin ng√¢n h√†ng kh√¥ng? Ch√∫ng t√¥i s·∫Ω kh√¥ng ch·ªãu tr√°ch nhi·ªám cho s·ªë ti·ªÅn b·ªã th·∫•t l·∫°c do sai s·ªë t√†i kho·∫£n ng√¢n h√†ng.",
      [
        { text: "H·ªßy", style: "cancel" },
        { text: "ƒê·ªìng √Ω", onPress: saveProfile },
      ]
    );
  } else {
    // N·∫øu kh√¥ng ƒë·ªïi ng√¢n h√†ng ‚Üí l∆∞u lu√¥n
    await saveProfile();
  }
};


 const handlePickAvatar = async () => {
  const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
  if (status !== "granted") {
    Alert.alert("Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi", "C·∫ßn c·∫•p quy·ªÅn truy c·∫≠p ·∫£nh ƒë·ªÉ ƒë·ªïi avatar.");
    return;
  }

  const result = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.Images,
    quality: 0.7,
  });

  if (!result.canceled) {
    const file = result.assets[0];
    console.log("üñºÔ∏è Ch·ªçn ·∫£nh:", file);

    // ‚úÖ hi·ªÉn th·ªã preview ngay
    setAvatar(file.uri); 
    await handleUploadAvatar(file);
  }
};

// üì§ Upload avatar l√™n server
const handleUploadAvatar = async (file) => {
  if (!user?.userId) {
    Alert.alert("L·ªói", "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c userId.");
    return;
  }

  setUploading(true);
  const res = await updateUserAvatar(
    user.userId,
    {
      uri: file.uri,
      name: file.fileName || `avatar_${Date.now()}.jpg`,
      type: file.mimeType || "image/jpeg",
    },
    user?.token
  );
  setUploading(false);

  if (res.success) {
    Alert.alert("Th√†nh c√¥ng", "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng");

    // ‚úÖ N·∫øu server tr·∫£ URL string th√¨ d√πng, ng∆∞·ª£c l·∫°i v·∫´n gi·ªØ preview
    const newAvatarUrl = typeof res.data === "string" ? res.data : file.uri;
    setAvatar(newAvatarUrl);

    // ‚úÖ L∆∞u ƒë√∫ng ƒë·ªãnh d·∫°ng (string)
    await saveUser({ ...user, avatarUrl: newAvatarUrl });
  } else {
    Alert.alert("Th·∫•t b·∫°i", res.message || "C·∫≠p nh·∫≠t avatar th·∫•t b·∫°i");
  }
};


  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={26} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Ch·ªânh s·ª≠a th√¥ng tin</Text>
        <View style={{ width: 26 }} />
      </View>

      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.avatarContainer}>
          <TouchableOpacity onPress={handlePickAvatar}>
            <Image
              source={{
                uri: avatar || "https://ui-avatars.com/api/?name=User",
              }}
              style={styles.avatar}
            />
            {uploading && (
              <View style={styles.overlay}>
                <ActivityIndicator color="#fff" size="small" />
              </View>
            )}
          </TouchableOpacity>
          <Text style={styles.avatarLabel}>Ch·∫°m ƒë·ªÉ ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán</Text>
        </View>

        <View style={styles.formContainer}>
          {/* H·ªç */}
          <View style={styles.inputGroup}>
            <View style={styles.labelContainer}>
              <Ionicons name="person-outline" size={18} color="#10b981" />
              <Text style={styles.label}>H·ªç</Text>
            </View>
            <TextInput 
              style={styles.input} 
              value={lastName} 
              onChangeText={setLastName}
              placeholderTextColor="#9ca3af"
            />
          </View>

          {/* T√™n */}
          <View style={styles.inputGroup}>
            <View style={styles.labelContainer}>
              <Ionicons name="person-outline" size={18} color="#10b981" />
              <Text style={styles.label}>T√™n</Text>
            </View>
            <TextInput 
              style={styles.input} 
              value={firstName} 
              onChangeText={setFirstName}
              placeholderTextColor="#9ca3af"
            />
          </View>

          {/* Email */}
          <View style={styles.inputGroup}>
            <View style={styles.labelContainer}>
              <Ionicons name="mail-outline" size={18} color="#10b981" />
              <Text style={styles.label}>Email</Text>
            </View>
            <TextInput
              style={[styles.input, styles.inputDisabled]}
              value={email}
              editable={false}
              selectTextOnFocus={false}
            />
          </View>

          {/* Ng√†y sinh */}
          <View style={styles.inputGroup}>
            <View style={styles.labelContainer}>
              <Ionicons name="calendar-outline" size={18} color="#10b981" />
              <Text style={styles.label}>Ng√†y sinh</Text>
            </View>
            <TouchableOpacity onPress={() => setShowDatePicker(true)} style={styles.input}>
              <Text style={dob ? styles.dateText : styles.datePlaceholder}>
                {dob ? dob : "Ch·ªçn ng√†y sinh"}
              </Text>
            </TouchableOpacity>
          </View>

          {showDatePicker && (
            <DateTimePicker
              value={dob ? new Date(dob) : new Date()}
              mode="date"
              display="spinner"
              onChange={(event, selectedDate) => {
                setShowDatePicker(false);
                if (selectedDate) {
                  setDob(selectedDate.toISOString().split("T")[0]);
                }
              }}
            />
          )}

          {/* Gi·ªõi thi·ªáu */}
          <View style={styles.inputGroup}>
            <View style={styles.labelContainer}>
              <Ionicons name="chatbubble-outline" size={18} color="#10b981" />
              <Text style={styles.label}>Gi·ªõi thi·ªáu</Text>
            </View>
            <TextInput
              style={[styles.input, styles.textArea]}
              value={bio}
              onChangeText={setBio}
              multiline
              placeholder="Gi·ªõi thi·ªáu ƒë√¥i n√©t v·ªÅ b·∫°n..."
              placeholderTextColor="#9ca3af"
            />
          </View>

          {/* Ng√¢n h√†ng */}
<View style={styles.inputGroup}>
  <View style={styles.labelContainer}>
    <Ionicons name="card-outline" size={18} color="#10b981" />
    <Text style={styles.label}>Ng√¢n h√†ng</Text>
  </View>
  <View style={[styles.input, { padding: 0, overflow: "hidden" }]}>
    <Picker
      selectedValue={selectedBankId}
      onValueChange={(value) => setSelectedBankId(value)}
    >
      <Picker.Item label="-- Ch·ªçn ng√¢n h√†ng --" value="" />
      {banks.map((bank) => (
        <Picker.Item
          key={bank.bankId}
          label={bank.bankName}
          value={bank.bankId}
        />
      ))}
    </Picker>
  </View>
</View>

{/* S·ªë t√†i kho·∫£n */}
<View style={styles.inputGroup}>
  <View style={styles.labelContainer}>
    <Ionicons name="cash-outline" size={18} color="#10b981" />
    <Text style={styles.label}>S·ªë t√†i kho·∫£n</Text>
  </View>
  <TextInput
    style={styles.input}
    value={bankNumber}
    onChangeText={setBankNumber}
    placeholder="Nh·∫≠p s·ªë t√†i kho·∫£n"
    placeholderTextColor="#9ca3af"
    keyboardType="numeric"
  />
</View>


          {/* Save Button */}
          <TouchableOpacity 
            onPress={handleSave} 
            style={styles.button}
            activeOpacity={0.8}
          >
            {loading ? (
              <ActivityIndicator color="#fff" size="small" />
            ) : (
              <View style={styles.buttonContent}>
                <Ionicons name="checkmark-circle-outline" size={22} color="#fff" />
                <Text style={styles.buttonText}>L∆∞u thay ƒë·ªïi</Text>
              </View>
            )}
          </TouchableOpacity>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

