import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  Pressable,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Ionicons } from "@expo/vector-icons";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import { router, useLocalSearchParams } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
import styles from "./GroupCalendar.style";
import { getUser } from "../../../services/storageService";

export default function GroupCalendarScreen() {
  const { id: groupId } = useLocalSearchParams();
  const [content, setContent] = useState("");
  const [date, setDate] = useState(new Date());
  const [repeat, setRepeat] = useState("Kh√¥ng l·∫∑p l·∫°i");
  const [isDatePickerVisible, setDatePickerVisible] = useState(false);
  const [showRepeatOptions, setShowRepeatOptions] = useState(false);

  const handleCreateReminder = async () => {
  if (!content.trim()) {
    alert("Vui l√≤ng nh·∫≠p n·ªôi dung nh·∫Øc h·∫πn");
    return;
  }

  if (date < new Date()) {
    alert("Kh√¥ng th·ªÉ ch·ªçn ng√†y gi·ªù trong qu√° kh·ª©");
    return;
  }

  if (!groupId) {
    alert("Kh√¥ng t√¨m th·∫•y groupId, vui l√≤ng th·ª≠ l·∫°i");
    console.log("‚ùå L·ªói: groupId is undefined");
    return;
  }

  try {
    const user = await getUser();
    if (!user) {
      alert("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      return;
    }

    const newReminderMessage = {
      id: Date.now().toString(),
      type: "reminder",
      content,
      date: date.toISOString(),
      repeat,
      sender: "B·∫°n",
      senderId: user.userId,
      avatarUrl: user.avatarUrl || "https://via.placeholder.com/150",
      time: new Date().toLocaleTimeString("vi-VN", {
        hour: "2-digit",
        minute: "2-digit",
      }),
      isCurrentUser: true,
    };

    // L∆∞u nh·∫Øc h·∫πn v√†o AsyncStorage
    const cachedMessages = await AsyncStorage.getItem(`messages_${groupId}`);
    const existingMessages = cachedMessages ? JSON.parse(cachedMessages) : [];
    const updatedMessages = [...existingMessages, newReminderMessage].sort(
      (a, b) => new Date(a.createdAt || a.date) - new Date(b.createdAt || b.date)
    );
    await AsyncStorage.setItem(`messages_${groupId}`, JSON.stringify(updatedMessages));

    // Reset form
    resetForm();

    // üëâ Quay v·ªÅ m√†n chat k√®m param newReminder
    router.push({
  pathname: `/chat/${groupId}`,
  params: { id: groupId, newReminder: JSON.stringify(newReminderMessage) },
});

  } catch (err) {
    console.log("‚ùå L·ªói t·∫°o nh·∫Øc h·∫πn:", err);
    alert("ƒê√£ x·∫£y ra l·ªói khi t·∫°o nh·∫Øc h·∫πn");
  }
};


  const resetForm = () => {
    setContent("");
    setDate(new Date());
    setRepeat("Kh√¥ng l·∫∑p l·∫°i");
    setShowRepeatOptions(false);
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()} style={styles.backBtn}>
          <Ionicons name="arrow-back" size={24} color="#333" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>T·∫°o nh·∫Øc h·∫πn</Text>
      </View>
      <View style={styles.formBox}>
        <Text style={styles.label}>Nh·∫≠p n·ªôi dung</Text>
        <TextInput
          style={styles.input}
          placeholder="Nh·∫≠p n·ªôi dung nh·∫Øc h·∫πn"
          value={content}
          onChangeText={setContent}
        />
        <Text style={styles.label}>Ch·ªçn ng√†y nh·∫Øc h·∫πn</Text>
        <Pressable
          style={styles.dateBtn}
          onPress={() => setDatePickerVisible(true)}
        >
          <Ionicons name="calendar-outline" size={20} color="#333" />
          <Text style={{ marginLeft: 8 }}>{date.toLocaleString("vi-VN")}</Text>
        </Pressable>
        <DateTimePickerModal
          isVisible={isDatePickerVisible}
          mode="datetime"
          date={date}
          onConfirm={(selectedDate) => {
            setDate(selectedDate);
            setDatePickerVisible(false);
          }}
          onCancel={() => setDatePickerVisible(false)}
        />
        <Text style={styles.label}>Ch·ªçn ki·ªÉu l·∫∑p l·∫°i</Text>
        <Pressable
          style={styles.dateBtn}
          onPress={() => setShowRepeatOptions((prev) => !prev)}
        >
          <Ionicons name="repeat-outline" size={20} color="#333" />
          <Text style={{ marginLeft: 8 }}>{repeat}</Text>
        </Pressable>
        {showRepeatOptions && (
          <View style={styles.dropdown}>
            {["Kh√¥ng l·∫∑p l·∫°i", "H√†ng ng√†y", "H√†ng tu·∫ßn", "H√†ng th√°ng"].map(
              (option) => (
                <Pressable
                  key={option}
                  style={styles.dropdownItem}
                  onPress={() => {
                    setRepeat(option);
                    setShowRepeatOptions(false);
                  }}
                >
                  <Text
                    style={{
                      color: repeat === option ? "#2ecc71" : "#333",
                      fontWeight: repeat === option ? "600" : "400",
                    }}
                  >
                    {option}
                  </Text>
                </Pressable>
              )
            )}
          </View>
        )}
        <TouchableOpacity style={styles.createBtn} onPress={handleCreateReminder}>
          <Text style={{ color: "white", fontWeight: "bold" }}>
            T·∫°o nh·∫Øc h·∫πn
          </Text>
        </TouchableOpacity>
      </View>
      {/* B·ªè FlatList n·∫øu kh√¥ng c·∫ßn hi·ªÉn th·ªã danh s√°ch ·ªü ƒë√¢y */}
      {/* N·∫øu mu·ªën gi·ªØ, th√™m l·∫°i v√† load t·ª´ AsyncStorage nh∆∞ tr∆∞·ªõc */}
    </SafeAreaView>
  );
}