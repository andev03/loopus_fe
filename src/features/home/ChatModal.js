import React, { useState, useEffect, useRef } from 'react';
import { Modal, View, TextInput, TouchableOpacity, Text, FlatList, ActivityIndicator, SafeAreaView, KeyboardAvoidingView, Platform } from 'react-native';
import styles from './ChatModal.styles'; 

const QUICK_QUESTIONS = [
  {
    question: "·ª®ng d·ª•ng n√†y d√πng ƒë·ªÉ l√†m g√¨?",
    answer:
      "üì± ƒê√¢y l√† ·ª©ng d·ª•ng Loopus ‚Äî gi√∫p b·∫°n v√† b·∫°n b√® d·ªÖ d√†ng chia ti·ªÅn khi ƒëi ƒÉn, du l·ªãch ho·∫∑c sinh ho·∫°t nh√≥m. B·∫°n c√≥ th·ªÉ t·∫°o nh√≥m, ghi l·∫°i c√°c kho·∫£n chi ti√™u, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh ai tr·∫£ bao nhi√™u, ai n·ª£ bao nhi√™u. Ngo√†i ra c√≤n c√≥ t√≠nh nƒÉng chat nh√≥m, nh·∫Øc nh·ªü s·ª± ki·ªán v√† theo d√µi l·ªãch s·ª≠ giao d·ªãch."
  },
  {
    question: "C√°c t√≠nh nƒÉng ch√≠nh c·ªßa app Loopus l√† g√¨?",
    answer:
      "‚ú® C√°c t√≠nh nƒÉng ch√≠nh:\n- T·∫°o nh√≥m b·∫°n b√® ho·∫∑c s·ª± ki·ªán\n- Ghi l·∫°i c√°c kho·∫£n chi ti√™u\n- T·ª± ƒë·ªông t√≠nh s·ªë ti·ªÅn m·ªói ng∆∞·ªùi c·∫ßn tr·∫£\n- Chat nh√≥m\n- Nh·∫Øc nh·ªü v√† qu·∫£n l√Ω l·ªãch s·ª≠ giao d·ªãch"
  },
  {
    question: "H∆∞·ªõng d·∫´n c√°ch chia ti·ªÅn trong nh√≥m",
    answer:
      "üí∞ ƒê·ªÉ chia ti·ªÅn:\n1Ô∏è‚É£ T·∫°o nh√≥m ho·∫∑c ch·ªçn nh√≥m c√≥ s·∫µn.\n2Ô∏è‚É£ Th√™m kho·∫£n chi ti√™u (ai tr·∫£, bao nhi√™u, nh·ªØng ai tham gia).\n3Ô∏è‚É£ ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông chia ƒë·ªÅu ho·∫∑c theo t·ªâ l·ªá t√πy ch·ªçn.\n4Ô∏è‚É£ M·ªói th√†nh vi√™n s·∫Ω th·∫•y r√µ m√¨nh c·∫ßn tr·∫£ ho·∫∑c nh·∫≠n bao nhi√™u."
  },
  {
    question: "C√°ch t√≠nh to√°n chia ti·ªÅn gi·ªØa c√°c th√†nh vi√™n?",
    answer:
      "üßÆ Khi b·∫°n th√™m m·ªôt kho·∫£n chi ti√™u:\n- N·∫øu chia ƒë·ªÅu ‚Üí t·ªïng ti·ªÅn chia ƒë·ªÅu cho s·ªë ng∆∞·ªùi tham gia.\n- N·∫øu chia t√πy ch·ªânh ‚Üí d·ª±a tr√™n ph·∫ßn b·∫°n nh·∫≠p.\n- Ng∆∞·ªùi tr·∫£ s·∫Ω nh·∫≠n l·∫°i ti·ªÅn t·ª´ nh·ªØng ng∆∞·ªùi c√≤n l·∫°i.\n- ·ª®ng d·ª•ng s·∫Ω t√≠nh to√°n t·ª± ƒë·ªông s·ªë ti·ªÅn n·ª£ c·ªßa t·ª´ng ng∆∞·ªùi."
  },
    {
    question: "App n√†y c√≥ mi·ªÖn ph√≠ kh√¥ng?",
    answer:
      "üí∏ ·ª®ng d·ª•ng Loopus  ho√†n to√†n **mi·ªÖn ph√≠**. Nh∆∞ng b·∫°n c√≥ th·ªÉ mua g√≥i member c·ªßa ch√∫ng t√¥i v·ªõi m·ª©c gi√° c·ª±c r·∫ª ƒë·ªÉ h∆∞·ªüng th√™m nhi·ªÅu quy·ªÅn l·ª£i t·ª´ ·ª©ng d·ª•ng."
  },
   {
    question: "D·ªØ li·ªáu c·ªßa t√¥i c√≥ ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n kh√¥ng?",
    answer:
      "üîê C√≥. T·∫•t c·∫£ d·ªØ li·ªáu c·ªßa b·∫°n ƒë∆∞·ª£c l∆∞u tr√™n server b·∫£o m·∫≠t. M·ªói nh√≥m v√† kho·∫£n chi ti√™u ch·ªâ th√†nh vi√™n c√≥ quy·ªÅn m·ªõi c√≥ th·ªÉ xem."
  },
  {
    question: "N·∫øu c√≥ nhi·ªÅu ng∆∞·ªùi tr·∫£ ti·ªÅn th√¨ sao?",
    answer:
      "ü§ù Loopus h·ªó tr·ª£ ch·ªçn **nhi·ªÅu ng∆∞·ªùi tr·∫£**. B·∫°n ch·ªâ c·∫ßn nh·∫≠p s·ªë ti·ªÅn m·ªói ng∆∞·ªùi tr·∫£, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh ph·∫ßn c√≤n l·∫°i v√† chia ƒë·ªÅu ph·∫ßn n·ª£ gi·ªØa c√°c th√†nh vi√™n c√≤n l·∫°i."
  },
  
];

const ChatModal = ({ visible, onClose }) => {
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [loading, setLoading] = useState(false);
  const flatListRef = useRef(null);
  const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

  useEffect(() => {
    if (visible) {
      console.log('=== DEBUG LOAD KEY (GEMINI) ===');
      console.log('GEMINI_API_KEY loaded:', GEMINI_API_KEY ? `${GEMINI_API_KEY.substring(0, 10)}...` : 'NOT LOADED');
      console.log('Key length:', GEMINI_API_KEY ? GEMINI_API_KEY.length : 0);
      console.log('=== END DEBUG LOAD KEY ===');
    }
  }, [visible]);

  // Auto scroll khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messages.length > 0 && flatListRef.current) {
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
    }
  }, [messages]);

  const handleQuickQuestion = (item) => {
    const userMsg = { from: 'user', text: item.question };
    setMessages((prev) => [...prev, userMsg]);
    
    // Delay ƒë·ªÉ t·∫°o c·∫£m gi√°c bot ƒëang "suy nghƒ©"
    setLoading(true);
    setTimeout(() => {
      const botMsg = { from: 'bot', text: item.answer };
      setMessages((prev) => [...prev, botMsg]);
      setLoading(false);
    }, 600);
  };

  const sendMessage = async (text) => {
  if (!text.trim()) return;
  const userMsg = { from: 'user', text };
  setMessages((prev) => [...prev, userMsg]);
  setInputText('');
  setLoading(true);

  try {
    // N·∫øu c√≥ c√¢u h·ªèi trong QUICK_QUESTIONS ‚Üí tr·∫£ l·ªùi ngay kh√¥ng c·∫ßn g·ªçi API
    const matched = QUICK_QUESTIONS.find(
      q => q.question.toLowerCase() === text.toLowerCase()
    );
    if (matched) {
      setTimeout(() => {
        const botMsg = { from: 'bot', text: matched.answer };
        setMessages(prev => [...prev, botMsg]);
        setLoading(false);
      }, 500);
      return;
    }

    // ‚ùáÔ∏è G·ªçi Gemini API khi kh√¥ng kh·ªõp c√¢u h·ªèi c√≥ s·∫µn
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ role: "user", parts: [{ text }] }]
      })
    });

    const data = await response.json();
    const botText = data?.candidates?.[0]?.content?.parts?.[0]?.text || "ü§ñ M√¨nh kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p.";
    setMessages(prev => [...prev, { from: 'bot', text: botText }]);
  } catch (error) {
    console.error("Gemini API error:", error);
    setMessages(prev => [...prev, { from: 'bot', text: "‚ùå C√≥ l·ªói x·∫£y ra khi g·ªçi AI." }]);
  } finally {
    setLoading(false);
  }
};


  const renderEmptyState = () => (
    <View style={styles.emptyContainer}>
      <Text style={styles.emptyIcon}>üí¨</Text>
      <Text style={styles.emptyTitle}>Xin ch√†o!</Text>
      <Text style={styles.emptySubtitle}>
        Ch·ªçn m·ªôt c√¢u h·ªèi b√™n d∆∞·ªõi ho·∫∑c nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán
      </Text>
    </View>
  );

  return (
    <Modal visible={visible} animationType="slide" transparent={false}>
      <SafeAreaView style={styles.modalContainer}>
        <KeyboardAvoidingView 
          style={{ flex: 1 }} 
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}
          keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 20}
        >
          <View style={styles.chatBox}>
            {/* Header */}
            <View style={styles.header}>
              <Text style={styles.headerTitle}>üí¨ Tr·ª£ L√Ω Loopus</Text>
              <TouchableOpacity onPress={onClose} style={styles.closeBtn}>
                <Text style={styles.closeText}>‚úï</Text>
              </TouchableOpacity>
            </View>

            {/* Messages */}
            <View style={styles.messagesContainer}>
              {messages.length === 0 ? (
                renderEmptyState()
              ) : (
                <FlatList
                  ref={flatListRef}
                  data={messages}
                  keyExtractor={(_, index) => index.toString()}
                  showsVerticalScrollIndicator={false}
                  contentContainerStyle={{ paddingBottom: 10 }}
                  onContentSizeChange={() => {
                    flatListRef.current?.scrollToEnd({ animated: true });
                  }}
                  renderItem={({ item }) => (
                    <View style={[
                      styles.messageBubble, 
                      item.from === 'user' ? styles.userBubble : styles.botBubble
                    ]}>
                      <Text style={item.from === 'user' ? styles.messageText : styles.botMessageText}>
                        {item.text}
                      </Text>
                    </View>
                  )}
                />
              )}

              {loading && (
                <View style={styles.loadingContainer}>
                  <ActivityIndicator size="small" color="#10B981" />
                  <Text style={styles.loadingText}>ƒêang tr·∫£ l·ªùi...</Text>
                </View>
              )}
            </View>

            {/* Quick Questions */}
            <View style={styles.quickQuestionsSection}>
              <Text style={styles.quickQuestionsTitle}>C√¢u h·ªèi g·ª£i √Ω</Text>
              <FlatList
                data={QUICK_QUESTIONS}
                keyExtractor={(item, index) => index.toString()}
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={styles.quickQuestionsScroll}
                renderItem={({ item }) => (
                  <TouchableOpacity 
                    style={styles.quickBtn} 
                    onPress={() => handleQuickQuestion(item)}
                    activeOpacity={0.7}
                  >
                    <Text style={styles.quickBtnText}>{item.question}</Text>
                  </TouchableOpacity>
                )}
              />
            </View>

            {/* Input */}
            <View style={styles.inputSection}>
              <View style={styles.inputRow}>
                <TextInput
                  style={styles.input}
                  placeholder="B·∫°n mu·ªën h·ªèi g√¨ n√†o..."
                  placeholderTextColor="#999999"
                  value={inputText}
                  onChangeText={setInputText}
                  returnKeyType="send"
                  onSubmitEditing={() => sendMessage(inputText)}
                  multiline
                  maxLength={500}
                />
                <TouchableOpacity 
                  style={[styles.sendBtn, !inputText.trim() && styles.sendBtnDisabled]} 
                  onPress={() => sendMessage(inputText)}
                  disabled={!inputText.trim()}
                  activeOpacity={0.8}
                >
                  <Text style={styles.sendBtnText}>‚û§</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </Modal>
  );
};

export default ChatModal;