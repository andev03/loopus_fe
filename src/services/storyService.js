import axios from "axios";
import { getUser, getUserId } from "../services/storageService";

const API_BASE_URL = "https://loopus.nguyenhoangan.site/api/stories";

export const storyService = {
  // üü¢ T·∫°o story
  createStory: async (file, caption = "", visibilityType = "followers", albumId = null) => {
    try {
      const userId = await getUserId();
      const user = await getUser();
      const token = user?.token;

      if (!userId) throw new Error("Thi·∫øu userId, kh√¥ng th·ªÉ t·∫°o story.");

      const formData = new FormData();

      formData.append("file", {
        uri: file.uri.startsWith("file://") ? file.uri : `file://${file.uri}`,
        type: file.type || "image/jpeg",
        name: file.name || "story.jpg",
      });

      const requestBody = { userId, caption, visibilityType, albumId };
      formData.append("request", JSON.stringify(requestBody));

      console.log("üì§ G·ª≠i formData:", requestBody);

      const res = await axios.post(API_BASE_URL, formData, {
        headers: {
          Accept: "application/json",
          ...(token && { Authorization: `Bearer ${token}` }),
        },
        transformRequest: (data) => data, // gi·ªØ nguy√™n formData
      });

      console.log("‚úÖ [createStory] Th√†nh c√¥ng:", res.data);
      return res.data;
    } catch (err) {
      console.error("‚ùå [createStory] G·∫∑p l·ªói:", err.message);
      if (err.response)
        console.log("üì® Server tr·∫£:", err.response.status, err.response.data);
      throw err;
    }
  },

  // üîµ L·∫•y danh s√°ch story feed c·ªßa user
  getFeed: async (userId) => {
    try {
      const user = await getUser();
      const token = user?.token;

      const res = await axios.get(`${API_BASE_URL}/${userId}/feed`, {
        headers: {
          ...(token && { Authorization: `Bearer ${token}` }),
        },
      });

      return res.data;
    } catch (err) {
      console.error("‚ùå getFeed error:", err);
      throw err.response?.data || err;
    }
  },

  // üü£ L·∫•y danh s√°ch story trong 1 album
  getStoriesByAlbum: async (albumId) => {
    try {
      const user = await getUser();
      const token = user?.token;

      const res = await axios.get(`${API_BASE_URL}/${albumId}`, {
        headers: {
          ...(token && { Authorization: `Bearer ${token}` }),
        },
      });

      return res.data;
    } catch (err) {
      console.error("‚ùå getStoriesByAlbum error:", err);
      throw err.response?.data || err;
    }
  },

  // üü¢ L·∫•y story c·ªßa 1 user c·ª• th·ªÉ
  getStoriesByUser: async (userId) => {
    try {
      const user = await getUser();
      const token = user?.token;

      const res = await axios.get(`${API_BASE_URL}/user/${userId}`, {
        headers: {
          ...(token && { Authorization: `Bearer ${token}` }),
        },
      });

      return res.data;
    } catch (err) {
      console.error("‚ùå getStoriesByUser error:", err);
      throw err.response?.data || err;
    }
  },

  // üî¥ X√≥a 1 story
  deleteStory: async (storyId) => {
    try {
      const user = await getUser();
      const token = user?.token;

      const res = await axios.delete(`${API_BASE_URL}/${storyId}`, {
        headers: {
          ...(token && { Authorization: `Bearer ${token}` }),
        },
      });

      return res.data;
    } catch (err) {
      console.error("‚ùå deleteStory error:", err);
      throw err.response?.data || err;
    }
  },
};
